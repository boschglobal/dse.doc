<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DSE Network API Reference on Dynamic Simulation Environment</title><link>https://boschglobal.github.io/dse.doc/apis/network/</link><description>Recent content in DSE Network API Reference on Dynamic Simulation Environment</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://boschglobal.github.io/dse.doc/apis/network/index.xml" rel="self" type="application/rss+xml"/><item><title>Example Network Function API Reference</title><link>https://boschglobal.github.io/dse.doc/apis/network/functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/apis/network/functions/</guid><description>Example Network Functions Example implementation of Network Functions.
Typedefs InstanceData typedef struct InstanceData { int position; } Functions counter_inc_uint8 Increment an 8-bit counter in the message packet.
Note: in the encode path, changes to the counter are not reflected in the corresponding signal. Subsequent calls to network_message_recalculate may overwrite the modified counter.
Parameters data (void**) Pointer reference for instance data. payload (uint8_t*) The payload that this function will modify. payload_len (size_t) The length of the payload.</description></item><item><title>Network API Reference</title><link>https://boschglobal.github.io/dse.doc/apis/network/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/apis/network/network/</guid><description>Network Model The Network Model runs a Communication Stack which represents the connection between Physical Signals and Network Messages.
Typedefs MarshalItem typedef struct MarshalItem { NetworkSignal* signal; NetworkMessage* message; size_t signal_vector_index; } Network typedef struct Network { const char* name; int* doc; NetworkMessage* messages; const char* message_lib_path; const char* function_lib_path; void* message_lib_handle; void* function_lib_handle; MarshalItem* marshal_list; size_t signal_count; const char** signal_name; double* signal_vector; NetworkScheduleItem* schedule_list; uint32_t tick; uint32_t bus_id; uint32_t node_id; uint32_t interface_id; } NetworkFunction typedef struct NetworkFunction { char* name; int* annotations; void* data; NetworkFunctionFunc function; } NetworkMessage typedef struct NetworkMessage { const char* name; uint32_t frame_id; uint8_t frame_type; NetworkSignal* signals; const char* container; uint32_t mux_id; NetworkSignal* mux_signal; void* buffer; size_t buffer_len; uint8_t cycle_time_ms; void* payload; uint8_t payload_len; uint32_t buffer_checksum; bool needs_tx; PackFunc pack_func; UnpackFunc unpack_func; bool update_signals; NetworkFunction* encode_functions; NetworkFunction* decode_functions; } NetworkScheduleItem typedef struct NetworkScheduleItem { NetworkMessage* message; uint32_t alarm; } NetworkSignal typedef struct NetworkSignal { const char* name; char* signal_name; const char* member_type; unsigned int buffer_offset; double init_value; bool internal; double value; bool mux_signal; MarshalItem* mux_mi; EncodeFuncInt8 encode_func_int8; EncodeFuncInt16 encode_func_int16; EncodeFuncInt32 encode_func_int32; EncodeFuncInt64 encode_func_int64; EncodeFuncFloat encode_func_float; EncodeFuncDouble encode_func_double; DecodeFuncInt8 decode_func_int8; DecodeFuncInt16 decode_func_int16; DecodeFuncInt32 decode_func_int32; DecodeFuncInt64 decode_func_int64; DecodeFuncFloat decode_func_float; DecodeFuncDouble decode_func_double; RangeFuncInt8 range_func_int8; RangeFuncInt16 range_func_int16; RangeFuncInt32 range_func_int32; RangeFuncInt64 range_func_int64; RangeFuncFloat range_func_float; RangeFuncDouble range_func_double; } Functions</description></item></channel></rss>