<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DSE FMI API Reference on Dynamic Simulation Environment</title><link>https://boschglobal.github.io/dse.doc/apis/fmi/</link><description>Recent content in DSE FMI API Reference on Dynamic Simulation Environment</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://boschglobal.github.io/dse.doc/apis/fmi/index.xml" rel="self" type="application/rss+xml"/><item><title>FMU API Reference</title><link>https://boschglobal.github.io/dse.doc/apis/fmi/fmu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/apis/fmi/fmu/</guid><description>FMU API The FMU API provides a simplified FMU inteface with an abstracted variable interface (indexing and storage). The FMU Interface includes the methods:
Implemented by FMU developer: [fmu_create()](#fmu_create) [fmu_init()](#fmu_init) [fmu_step()](#fmu_step) [fmu_destroy()](#fmu_destroy) Additional provided functions: [fmu_log()](#fmu_log) - logging function Supporting Variable Table mechanism: [fmu_register_var()](#fmu_register_var) [fmu_register_var_table()](#fmu_register_var_table) [fmu_var_table()](#fmu_var_table) An additional FMU Signal Interface is available for more complex integrations:
[fmu_signals_reset()](#fmu_signals_reset) [fmu_signals_setup()](#fmu_signals_setup) [fmu_signals_remove()](#fmu_signals_remove) FMUs implemented using this simplified FMU API can be built for both FMI 2 and FMI 3 standards by linking to the relevant implementations:</description></item><item><title>FMI Gateway FMU API Reference</title><link>https://boschglobal.github.io/dse.doc/apis/fmi/fmigateway/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/apis/fmi/fmigateway/</guid><description>fmu_init In this method the required yaml files are parsed and the session is configured, if required. The gateway is set up and connected to the simbus. After a sucessfull connection has been established, the fmu variables are indexed to their corresponding simbus signals.
Required by FMU.
Parameters fmu (FmuInstanceData*) The FMU Descriptor object representing an instance of the FMU Model. Returns 0 (int32_t) The FMU was created correctly. fmu_step This method executes one step of the gateway model and signals are exchanged with the other simulation participants.</description></item><item><title>FMI MCL API Reference</title><link>https://boschglobal.github.io/dse.doc/apis/fmi/fmimcl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/apis/fmi/fmimcl/</guid><description>FMI Model Compatibility Library The FMI Model Compatibility Library provides an interfaces for loading and operating FMUs.
Sequence Diagram @startuml fmimcl-sequence title FMI MCL - Sequence actor User participant ModelC participant MCL participant MARSHAL participant FMIMCL participant ENGINE participant ADAPTER participant COMPONENT User -&amp;gt; ModelC : model_create() activate ModelC ModelC -&amp;gt; MCL : MCL_create() activate MCL MCL -&amp;gt; FMIMCL : fmimcl_parse() activate FMIMCL FMIMCL -&amp;gt; FMIMCL : parse yaml FMIMCL -&amp;gt; MCL deactivate FMIMCL MCL -&amp;gt; FMIMCL : fmimcl_adapter_create() activate FMIMCL FMIMCL -&amp;gt; ADAPTER : adapter_create() activate ADAPTER ADAPTER -&amp;gt; ADAPTER : set adapter functions ADAPTER -&amp;gt; FMIMCL deactivate ADAPTER FMIMCL -&amp;gt; MCL deactivate FMIMCL MCL-&amp;gt; ENGINE: fmimcl_allocate_scalar_source() activate ENGINE ENGINE-&amp;gt; MCL deactivate ENGINE MCL-&amp;gt; ENGINE: fmimcl_generate_marshal_table() activate ENGINE ENGINE-&amp;gt; MCL deactivate ENGINE MCL -&amp;gt; ModelC deactivate MCL ModelC -&amp;gt; MCL : MCL_load() activate MCL group Generate MarshalSignalMap list ||| MCL -&amp;gt; MCL++ loop for each SignalVector MCL -&amp;gt; MARSHAL : marshal_generate_signalmap() activate MARSHAL MARSHAL -&amp;gt; MCL deactivate MARSHAL end return NTL ||| end MCL -&amp;gt; ADAPTER : adapter_load() activate ADAPTER ADAPTER -&amp;gt; COMPONENT : load_functions() activate COMPONENT COMPONENT -&amp;gt; ADAPTER deactivate COMPONENT ADAPTER -&amp;gt; MCL deactivate ADAPTER MCL -&amp;gt; ModelC deactivate MCL ModelC -&amp;gt; MCL : mcl_init() activate MCL MCL -&amp;gt; ADAPTER : adapter_init() activate ADAPTER ADAPTER -&amp;gt; COMPONENT : do_init() activate COMPONENT COMPONENT -&amp;gt; ADAPTER deactivate COMPONENT ADAPTER -&amp;gt; MCL deactivate ADAPTER MCL -&amp;gt; ModelC deactivate MCL ModelC -&amp;gt; User deactivate ModelC User -&amp;gt; ModelC : model_step() activate ModelC ModelC -&amp;gt; MCL : mcl_marshal_out() activate MCL MCL -&amp;gt; MARSHAL : marshal_signalmap_out() activate MARSHAL MARSHAL -&amp;gt; MCL deactivate MARSHAL MCL -&amp;gt; ADAPTER : adapter_marshal_out() activate ADAPTER ADAPTER -&amp;gt; MARSHAL : marshal_group_out() activate MARSHAL MARSHAL -&amp;gt; ADAPTER deactivate MARSHAL ADAPTER -&amp;gt; COMPONENT : set_variables() activate COMPONENT COMPONENT -&amp;gt; ADAPTER deactivate COMPONENT ADAPTER -&amp;gt; MCL deactivate ADAPTER MCL -&amp;gt; ModelC deactivate MCL ModelC -&amp;gt; MCL : mcl_step() activate MCL MCL -&amp;gt; ADAPTER : adapter_step() activate ADAPTER ADAPTER -&amp;gt; COMPONENT : do_step() activate COMPONENT COMPONENT -&amp;gt; ADAPTER deactivate COMPONENT ADAPTER -&amp;gt; MCL deactivate ADAPTER MCL -&amp;gt; ModelC deactivate MCL ModelC -&amp;gt; MCL : mcl_marshal_in() activate MCL MCL -&amp;gt; ADAPTER : adapter_marshal_in() activate ADAPTER ADAPTER -&amp;gt; COMPONENT : get_variables() activate COMPONENT COMPONENT -&amp;gt; ADAPTER deactivate COMPONENT ADAPTER -&amp;gt; MARSHAL : marshal_group_in() activate MARSHAL MARSHAL -&amp;gt; ADAPTER deactivate MARSHAL ADAPTER -&amp;gt; MCL deactivate ADAPTER MCL -&amp;gt; MARSHAL : marshal_signalmap_in() activate MARSHAL MARSHAL -&amp;gt; MCL deactivate MARSHAL MCL -&amp;gt; ModelC deactivate MCL ModelC -&amp;gt; User deactivate ModelC User -&amp;gt; ModelC : model_destroy() activate ModelC ModelC -&amp;gt; MCL : mcl_unload() activate MCL MCL -&amp;gt; ADAPTER : adapter_unload() activate ADAPTER ADAPTER -&amp;gt; MCL deactivate ADAPTER MCL -&amp;gt; ModelC deactivate MCL ModelC -&amp;gt; MCL : MCL_destroy() activate MCL MCL -&amp;gt; FMIMCL: fmimcl_destroy() activate FMIMCL FMIMCL-&amp;gt; MCL deactivate FMIMCL MCL -&amp;gt; ModelC deactivate MCL ModelC -&amp;gt; User deactivate ModelC center footer Dynamic Simulation Environment @enduml mcl_create Create an instance of the MCL which will then be used to operate the Model that the MCL represents.</description></item><item><title>FMI ModelC FMU API Reference</title><link>https://boschglobal.github.io/dse.doc/apis/fmi/fmimodelc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/apis/fmi/fmimodelc/</guid><description>fmi2GetReal Get values for the provided list of value references.
Parameters c (fmi2Component*) An FmuInstanceData object representing an instance of this FMU. vr (fmi2ValueReference[]) List of value references to retrieve. nvr (int) The number of value references to retrieve. value (fmi2Real[]) Storage for the retrieved values. Returns fmi2OK (fmi2Status) The requested variables are retrieved (where available). fmu_signals_remove This method frees the allocated binary signal indexes.
Parameters fmu (FmuInstanceData*) The FMU Descriptor object representing an instance of the FMU Model.</description></item></channel></rss>