<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Simer on Dynamic Simulation Environment</title><link>https://boschglobal.github.io/dse.doc/tags/simer/</link><description>Recent content in Simer on Dynamic Simulation Environment</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://boschglobal.github.io/dse.doc/tags/simer/index.xml" rel="self" type="application/rss+xml"/><item><title>Simer - Simulation Runner</title><link>https://boschglobal.github.io/dse.doc/docs/user/simer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/user/simer/</guid><description>Synopsis Containerised simulation run-time.
# Run a simulation. $ simer path/to/simulation -stepsize 0.0005 -endtime 0.04 Simulation Setup Structure The structure of a simulation is flexible and can be arranged based on individual project needs. All paths used within a simulation configuration should be relative to the root of the simulation folder (i.e. the simulation path). The simer tool will search for YAML files contained within the simulation path and automatically configure, and then run, the contained simulation.</description></item><item><title>Simulation Topology</title><link>https://boschglobal.github.io/dse.doc/docs/arch/topology/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/arch/topology/</guid><description>Overview The Dynamic Simulation Environment supports the construction of Distributed Simulation Topologies, as well as Single Process SImulation Topologies, using both the Simer and ModelC simulation runtimes. Additionally, the underlying messaging transport can also be implemented in any programming language or operating system.
Stacked Several Models are stacked in a single model runtime.
Stacked w. Loopback Characteristics:
Single Process - Sequential execution of models within a single process using the ModelC model runtime.</description></item><item><title>Simulation Transports</title><link>https://boschglobal.github.io/dse.doc/docs/arch/transport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/arch/transport/</guid><description>Overview A Simulation Transport specifies how data-exchange between Models is facilitated by a simulation environment. Each transport has its own specific properties and the selection of a transport will be determined by the planned operational deployment of a simulation.
Transport Latency Status Loopback Fastest Available, stacked simulations (single process). TCP Fastest Planned. Redis Faster Recommended. Redis PubSub Fast Available, stable. RESP Fast Under consideration, for cloud connectivity (tunnelling). gPPC Fast Under consideration, for cloud connectivity (HTTP).</description></item><item><title>Testing with Testscript</title><link>https://boschglobal.github.io/dse.doc/docs/devel/testing/testscript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/devel/testing/testscript/</guid><description>Testscript for E2E Testing DSE Projects can use Testscript to run End-to-end tests (E2E) which are written in the (simple) txtar format. The containerised runtime supports both the Simer simulation runner as well as Taskfile based workflows.
Code Layout and Test Organisation L- tests/testscript Directory containing Testscript tests. L- e2e Collection of E2E tests. L- testcase.txtar Individual testcase (in txtar format). L- Makefile High-level build automation. Example Test Files tests/exec.txtar env NAME=minimal_inst env SIM=dse/modelc/build/_out/examples/minimal env SANDBOX=dse/modelc/build/_out # TEST: MStep executable exec sh -e $WORK/test.</description></item></channel></rss>