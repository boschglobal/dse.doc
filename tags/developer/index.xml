<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Developer on Dynamic Simulation Environment</title><link>https://boschglobal.github.io/dse.doc/tags/developer/</link><description>Recent content in Developer on Dynamic Simulation Environment</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://boschglobal.github.io/dse.doc/tags/developer/index.xml" rel="self" type="application/rss+xml"/><item><title>Model C with Network Codec</title><link>https://boschglobal.github.io/dse.doc/docs/devel/ncodec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/devel/ncodec/</guid><description>Network Codec The Model C Library integrates the DSE Network Codec implementation of the Automotive Bus schemas.
Configuration of Binary Signals IMPORTANT: It is recommended to specify a SignalGroup for each individual Model Instance in a Simulation. This is so that the MIMEtype of each Binary Signal can be completely configured (especially bus_id,node_id and interface_id). Models may implement supplemental configuration options (such as annotations on the Model Instance definition) which can further adjust or augment the MIMEtype parameters.</description></item><item><title>Testing with CMocka</title><link>https://boschglobal.github.io/dse.doc/docs/devel/testing/cmocka/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/devel/testing/cmocka/</guid><description>CMocka Testing for C Code The DSE Projects use CMocka for both Unit and Integration testing. This document introduces the typical CMocka Test Project and explains the testing features which are most often used when developing.
Code Layout and Test Organisation L- tests/cmocka Directory containing CMocka tests. L- target An individual test target (single test executable). L- __tests__.c Entry point for the test target (runs test groups). L- test_foo.c Contains a test group (e.</description></item><item><title>Model C Debug Techniques</title><link>https://boschglobal.github.io/dse.doc/docs/devel/debug/modelc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/devel/debug/modelc/</guid><description>GDB GDB Enabled Makefiles Repos can be enabled for interactive GDB debugging with the following technique:
In the main Makefile, add the GDB_CMD environment variable (i.e. --env GDB_CMD=&amp;quot;$(GDB_CMD)&amp;quot;) to every DOCKER_CMD that requires interactive GDB debugging support.
For each Makefile run target where interactive GDB debugging is required, prefix the run command with the GDB_CMD variable, for example: cd build/_out; $(GDB_CMD) bin/test_tdd.
Set the GDB_CMD environment variable with your GDB command (e.</description></item><item><title>Testing Models with SimMock</title><link>https://boschglobal.github.io/dse.doc/docs/devel/testing/simmock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/devel/testing/simmock/</guid><description>SimMock and CMocka Testing for Model Developers The DSE ModelC Library includes a SimMock source code library which may be used to develop integration tests for Models. With the SimMock library, a Model Developer is able to easily develop CMocka Testcases which:
Validate a model configuration and confirm the Models operation. Develop scenarios where expected signal exchange is verified. Inject network messages into the simulation or model (e.g. CAN frames) and read network messages.</description></item><item><title>Testing with Testscript</title><link>https://boschglobal.github.io/dse.doc/docs/devel/testing/testscript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/devel/testing/testscript/</guid><description>Testscript for E2E Testing DSE Projects can use Testscript to run End-to-end tests (E2E) which are written in the (simple) txtar format. The containerised runtime supports both the Simer simulation runner as well as Taskfile based workflows.
Code Layout and Test Organisation L- tests/testscript Directory containing Testscript tests. L- e2e Collection of E2E tests. L- testcase.txtar Individual testcase (in txtar format). L- Makefile High-level build automation. Example Test Files tests/exec.txtar env NAME=minimal_inst env SIM=dse/modelc/build/_out/examples/minimal env SANDBOX=dse/modelc/build/_out # TEST: MStep executable exec sh -e $WORK/test.</description></item></channel></rss>