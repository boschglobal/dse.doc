<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ModelC on Dynamic Simulation Environment</title><link>https://boschglobal.github.io/dse.doc/tags/modelc/</link><description>Recent content in ModelC on Dynamic Simulation Environment</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://boschglobal.github.io/dse.doc/tags/modelc/index.xml" rel="self" type="application/rss+xml"/><item><title>FMI ModelC FMU</title><link>https://boschglobal.github.io/dse.doc/docs/user/models/fmi/fmimodelc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/user/models/fmi/fmimodelc/</guid><description>Synposis FMI ModelC FMU
Simulation Setup Structure Example Simulation FMU Setup DOC: Provide description of FMI ModelC FMU Taskfile workflows.
FMU Operation DOC: Operation.</description></item><item><title>Model C with Network Codec</title><link>https://boschglobal.github.io/dse.doc/docs/devel/ncodec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/devel/ncodec/</guid><description>Network Codec The Model C Library integrates the DSE Network Codec implementation of the Automotive Bus schemas.
Configuration of Binary Signals IMPORTANT: It is recommended to specify a SignalGroup for each individual Model Instance in a Simulation. This is so that the MIMEtype of each Binary Signal can be completely configured (especially bus_id,node_id and interface_id). Models may implement supplemental configuration options (such as annotations on the Model Instance definition) which can further adjust or augment the MIMEtype parameters.</description></item><item><title>Simulation Framework Benchmark</title><link>https://boschglobal.github.io/dse.doc/docs/arch/benchmark/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/arch/benchmark/</guid><description>Overview The following Simulation Framework Benchmarks give an understanding of how the Dynamic Simulation Environment performs for a variety of simulation topologies. This information can be used to decide on a deployment strategy for a simulation that takes into account:
The total number of signals in a simulation. How many models are configured in a simulation. The expected amount of signal exchange per simulation step (throughput). Each of these benchmarks are evaluated across a subset of recommended simulation topologies.</description></item><item><title>Simulation Topology</title><link>https://boschglobal.github.io/dse.doc/docs/arch/topology/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/arch/topology/</guid><description>Overview The Dynamic Simulation Environment provides several simulation topologies, all of which support distributed simulations, that may incorporate models running on multiple OS/Arch combinations or running in multiple simulation environments.
These topologies include:
Standalone - Stacked model instances running in a single process. Uses a Loopback SimBus. Distributed - Distributed model instances, multi process, multi OS, optionally stacked. Uses a Redis SimBus. Gateway - Remote simulation systems are connected with a gateway model.</description></item><item><title>Simulation Transports</title><link>https://boschglobal.github.io/dse.doc/docs/arch/transport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/arch/transport/</guid><description>Overview A Simulation Transport specifies how data-exchange between Models is facilitated by a simulation environment. Each transport has its own specific properties and the selection of a transport will be determined by the planned operational deployment of a simulation.
Transport Latency Status Loopback Fastest Available, stacked simulations (single process). TCP Fastest Planned. Redis Faster Recommended. Redis PubSub Fast Available, stable. RESP Fast Under consideration, for cloud connectivity (tunnelling). gPPC Fast Under consideration, for cloud connectivity (HTTP).</description></item><item><title>Model Compatibility Library</title><link>https://boschglobal.github.io/dse.doc/docs/arch/mcl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/arch/mcl/</guid><description>Synopsis The Model Compatibility Library (MCL) of the Dynamic Simulation Environment (DSE) is a representation of an Architectural Pattern for supporting 3rd-party model interfaces in a DSE Simulation. To support a model interface an implementation will need to implement the MCL API (i.e. MclVTable) and may also optionally use the Marshal API to manage signal/variable exchange with the model being interfaced.
Design Deployment Configuration References MCL API Marshal API FMI MCL - An MCL implementation for the Modelica FMI Standard.</description></item><item><title>Signal Vectors</title><link>https://boschglobal.github.io/dse.doc/docs/arch/signalvector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/arch/signalvector/</guid><description>Synopsis The Dynamic Simulation Environment (DSE) presents models with a simple vector interface for the exchange of signals. Those signals can be either:
scalar : Internally represented as a 64bit storage container (double). These values are transparently exchanged between models. Models may cast/convert these scalar values to other types as required. binary : Binary strings, which may container embedded NULL values, can be exchanged between models. Additionally a binary signal may be annotated with a MIME type which describes the content of a binary signal.</description></item><item><title>Gateway Models</title><link>https://boschglobal.github.io/dse.doc/docs/arch/gateway/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/arch/gateway/</guid><description>Synopsis The Dynamic Simulation Environment (DSE) provides a Gateway API which can be used to connect remote simulations, via a gateway model, to a running DSE simulation. A gateway model takes care of signal exchange and time synchronisation between the remote simulation and the DSE simulation. Signals can be either scalar values or binary strings, the latter enabling virtual bus connections between simulation environments.
The gateway model runs in the remote simulation, and is written in that systems native language (or modelling construct).</description></item><item><title>Model C Debug Techniques</title><link>https://boschglobal.github.io/dse.doc/docs/devel/debug/modelc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/devel/debug/modelc/</guid><description>GDB GDB Enabled Makefiles Repos can be enabled for interactive GDB debugging with the following technique:
In the main Makefile, add the GDB_CMD environment variable (i.e. --env GDB_CMD=&amp;quot;$(GDB_CMD)&amp;quot;) to every DOCKER_CMD that requires interactive GDB debugging support.
For each Makefile run target where interactive GDB debugging is required, prefix the run command with the GDB_CMD variable, for example: cd build/_out; $(GDB_CMD) bin/test_tdd.
Set the GDB_CMD environment variable with your GDB command (e.</description></item></channel></rss>