<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CLI on Dynamic Simulation Environment</title><link>https://boschglobal.github.io/dse.doc/tags/cli/</link><description>Recent content in CLI on Dynamic Simulation Environment</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://boschglobal.github.io/dse.doc/tags/cli/index.xml" rel="self" type="application/rss+xml"/><item><title>Graph - Report Appliance</title><link>https://boschglobal.github.io/dse.doc/docs/user/report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/user/report/</guid><description>Synopsis Containerized report appliance that runs the installed reports on specified simulation package.
# Run the reports. $ dse-report examples/graph/&amp;lt;sim_name&amp;gt;/&amp;lt;simulation_status&amp;gt; Simulation Setup Structure The structure of a simulation follows the format examples/graph/&amp;lt;sim_name&amp;gt;/&amp;lt;simulation_status&amp;gt; # where simulation_status is sim_good or sim_with_error.
The graph-report command will run all installed reports on the specified simulation package.
Simulation Layout examples/ └── graph/ └── duplicate_writes/ ├── sim_good/ │ ├── data/ │ │ └── simulation.yaml │ └── model/ │ ├── input/ │ │ └── data/ │ │ ├── model.</description></item><item><title>Simer - Simulation Runner</title><link>https://boschglobal.github.io/dse.doc/docs/user/simer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/user/simer/</guid><description>Synopsis Containerised simulation run-time.
# Run a simulation. $ simer path/to/simulation -stepsize 0.0005 -endtime 0.04 Simulation Setup Structure The structure of a simulation is flexible and can be arranged based on individual project needs. All paths used within a simulation configuration should be relative to the root of the simulation folder (i.e. the simulation path). The simer tool will search for YAML files contained within the simulation path and automatically configure, and then run, the contained simulation.</description></item><item><title>AST - AST Tools</title><link>https://boschglobal.github.io/dse.doc/docs/user/sdp/tools/ast/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/user/sdp/tools/ast/</guid><description>Synopsis AST Tools.
$ dse-ast &amp;lt;command&amp;gt; [flags] The dse-ast toolchain provides commands for processing and transforming Abstract Syntax Trees (ASTs) in YAML format, based on input JSON.
Commands convert Transform the JSON into a YAML-based Abstract Syntax Tree (AST).
$ dse-ast convert -input &amp;lt;json_file_path&amp;gt; -output &amp;lt;yaml_ast_output_path&amp;gt; resolve Resolve internal references within the AST to produce a fully linked version.
$ dse-ast resolve -input &amp;lt;yaml_ast_path&amp;gt; -output &amp;lt;yaml_ast_output_path&amp;gt; generate Generate the final output simulation files based on the resolved AST.</description></item><item><title>DSL - DSL Tools</title><link>https://boschglobal.github.io/dse.doc/docs/user/sdp/tools/dsl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/user/sdp/tools/dsl/</guid><description>Synopsis DSL Tools.
$ dse-parse2ast [args] Commands dse-parse2ast Convert a DSE file into an intermediate JSON representation.
$ dse-parse2ast &amp;lt;dse_file_path&amp;gt; &amp;lt;json_output_file_path&amp;gt; Syntax Diagram</description></item><item><title>Graph - Graph Tools</title><link>https://boschglobal.github.io/dse.doc/docs/user/sdp/tools/graph/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/user/sdp/tools/graph/</guid><description>Synopsis Graph Tools for static and dynamic analysis of Simulations.
$ dse-graph report examples/graph/&amp;lt;sim-name&amp;gt;/&amp;lt;sim-status&amp;gt; Commands The Graph tool includes the following commands and options:
Drop $ dse-graph drop &amp;lt;sim|ast|-all&amp;gt; Import dse-graph import examples/graph/&amp;lt;sim-name&amp;gt;/&amp;lt;sim-status&amp;gt; Export $ dse-graph export export.cyp Report dse-graph report examples/graph/&amp;lt;sim-name&amp;gt;/&amp;lt;sim-status&amp;gt; Option Tag (-tag) dse-graph report -tag=tag_name examples/graph/&amp;lt;sim-name&amp;gt;/&amp;lt;sim-status&amp;gt; Option List (-list) dse-graph report &amp;lt;-list|-list-all|-list-tags&amp;gt; Option Name (-name) dse-graph report -name=&amp;#34;Report1;Report2&amp;#34; examples/graph/&amp;lt;sim-name&amp;gt;/&amp;lt;sim-status&amp;gt; Option Reports (-reports) dse-graph report -reports=path/to/reports examples/graph/&amp;lt;sim-name&amp;gt;/&amp;lt;sim-status&amp;gt; Report Appliance Usage # Start the memgraph container (using a make target).</description></item><item><title>LSP - LSP Tools</title><link>https://boschglobal.github.io/dse.doc/docs/user/sdp/tools/lsp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/user/sdp/tools/lsp/</guid><description>Synopsis LSP Tools.
Live AST View The extension supports live viewing of the models and channels derived from .dse files
To view the AST preview Open a supported .dse file in the VS Code editor. Click the Open Preview button in the upper-right corner of the editor window. Alternatively, you can use keyboard shortcuts Press Ctrl + K V to open preview in a side panel. Press Ctrl + Shift + V to open preview in the main panel.</description></item><item><title>Trace - Simulation Trace Tool</title><link>https://boschglobal.github.io/dse.doc/docs/user/tools/trace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/user/tools/trace/</guid><description>Synopsis Simulation trace tool.
# Create the trace folder. $ mkdir examples/binary/data/trace # Collect a SimBus trace from a simulation run. $ docker run --name simer -i --rm \ --volume ./examples/binary:/sim \ --env SIMBUS_TRACEFILE=data/trace/simbus.bin \ ghcr.io/boschglobal/dse-simer:latest # Print a long-form summary of the trace file. $ docker run --name simer -i --rm \ --volume ./examples/binary:/sim \ --entrypoint /usr/local/bin/trace \ ghcr.io/boschglobal/dse-simer:latest summary -long data/trace/simbus.bin Commands The Trace tool includes the following commands and options:</description></item></channel></rss>