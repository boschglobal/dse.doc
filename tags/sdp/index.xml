<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SDP on Dynamic Simulation Environment</title><link>https://boschglobal.github.io/dse.doc/tags/sdp/</link><description>Recent content in SDP on Dynamic Simulation Environment</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://boschglobal.github.io/dse.doc/tags/sdp/index.xml" rel="self" type="application/rss+xml"/><item><title>Builder - Simulation Development Platform</title><link>https://boschglobal.github.io/dse.doc/docs/user/builder/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/user/builder/</guid><description>Synopsis Containerised simulation builder and supporting DSE Language (DSE Lang).
Describe a Simulation simulation arch=linux-amd64 channel network uses dse.fmi https://github.com/boschglobal/dse.fmi v1.1.32 model fmu_CAN dse.fmi.network_model channel network network_channel workflow generate-model var NETWORK_SIGNAL can_bus var MIME_TYPE &amp;#34;application/x-automotive-bus;interface=stream;type=frame;bus=can;schema=fbs;bus_id=1;node_id=2;interface_id=3&amp;#34; var MEASUREMENT measurement.txt var OUT_DIR {{.PATH}}/data workflow generate-fmimodelc var FMU_NAME example var SIGNAL_GROUPS network Use the Builder Tool # Build a simulation. $ cd examples/runnable $ builder runnable.dse $ task -y Run the Simulation # Run a simulation.</description></item><item><title>SDP - Simulation Development Platform</title><link>https://boschglobal.github.io/dse.doc/docs/user/sdp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/user/sdp/</guid><description>Synopsis Simulation Development Platform (SDP) using Codespaces or DevContainers to code, build, and run DSE Simulations.
Setup GitHub Codespaces GitHub Codespaces provides a cloud-hosted development environment which is pre-configured for the SDP. This environment includes SDP Extensions and can be immediately used to build and run simulations.
Steps to use Codespaces: Go to the repository on GitHub. Click the Code button and choose Open with Codespaces. If you donâ€™t have an existing codespace, click New codespace to create one.</description></item><item><title>AST - AST Tools</title><link>https://boschglobal.github.io/dse.doc/docs/user/tools/ast/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/user/tools/ast/</guid><description>Synopsis AST Tools.
$ dse-ast &amp;lt;command&amp;gt; [flags] The dse-ast toolchain provides commands for processing and transforming Abstract Syntax Trees (ASTs) in YAML format, based on input JSON.
Commands convert Transform the JSON into a YAML-based Abstract Syntax Tree (AST).
$ dse-ast convert -input &amp;lt;json_file_path&amp;gt; -output &amp;lt;yaml_ast_output_path&amp;gt; resolve Resolve internal references within the AST to produce a fully linked version.
$ dse-ast resolve -input &amp;lt;yaml_ast_path&amp;gt; -output &amp;lt;yaml_ast_output_path&amp;gt; generate Generate the final output simulation files based on the resolved AST.</description></item><item><title>DSL - DSL Tools</title><link>https://boschglobal.github.io/dse.doc/docs/user/tools/dsl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/user/tools/dsl/</guid><description>Synopsis DSL Tools.
$ dse-parse2ast [args] Commands dse-parse2ast Convert a DSE file into an intermediate JSON representation.
$ dse-parse2ast &amp;lt;dse_file_path&amp;gt; &amp;lt;json_output_file_path&amp;gt; Syntax Diagram</description></item><item><title>Graph - Graph Tools</title><link>https://boschglobal.github.io/dse.doc/docs/user/tools/graph/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/user/tools/graph/</guid><description>Synopsis Graph Tools for static and dynamic analysis of Simulations.
$ dse-graph report examples/graph/&amp;lt;sim-name&amp;gt;/&amp;lt;sim-status&amp;gt; Commands The Graph tool includes the following commands and options:
Drop $ dse-graph drop &amp;lt;sim|ast|-all&amp;gt; Import dse-graph import examples/graph/&amp;lt;sim-name&amp;gt;/&amp;lt;sim-status&amp;gt; Export $ dse-graph export export.cyp Report dse-graph report examples/graph/&amp;lt;sim-name&amp;gt;/&amp;lt;sim-status&amp;gt; Option Tag (-tag) dse-graph report -tag=tag_name examples/graph/&amp;lt;sim-name&amp;gt;/&amp;lt;sim-status&amp;gt; Option List (-list) dse-graph report &amp;lt;-list|-list-all|-list-tags&amp;gt; Option Name (-name) dse-graph report -name=&amp;#34;Report1;Report2&amp;#34; examples/graph/&amp;lt;sim-name&amp;gt;/&amp;lt;sim-status&amp;gt; Option Reports (-reports) dse-graph report -reports=path/to/reports examples/graph/&amp;lt;sim-name&amp;gt;/&amp;lt;sim-status&amp;gt; Report Appliance Usage # Start the memgraph container (using a make target).</description></item><item><title>LSP - LSP Tools</title><link>https://boschglobal.github.io/dse.doc/docs/user/tools/lsp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/user/tools/lsp/</guid><description>Synopsis LSP Tools.
Live AST View The extension supports live viewing of the models and channels derived from .dse files
To view the AST preview Open a supported .dse file in the VS Code editor. Click the Open Preview button in the upper-right corner of the editor window. Alternatively, you can use keyboard shortcuts Press Ctrl + K V to open preview in a side panel. Press Ctrl + Shift + V to open preview in the main panel.</description></item></channel></rss>