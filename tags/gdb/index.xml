<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dynamic Simulation Environment â€“ GDB</title><link>https://boschglobal.github.io/dse.doc/tags/gdb/</link><description>Recent content in GDB on Dynamic Simulation Environment</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://boschglobal.github.io/dse.doc/tags/gdb/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Model C Debug Techniques</title><link>https://boschglobal.github.io/dse.doc/docs/devel/modelc_debug/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://boschglobal.github.io/dse.doc/docs/devel/modelc_debug/</guid><description>
&lt;h2 id="gdb">GDB&lt;/h2>
&lt;h3 id="gdb-enabled-makefiles">GDB Enabled Makefiles&lt;/h3>
&lt;p>Repos can be enabled for interactive GDB debugging with the following technique:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>In the main Makefile, add the &lt;code>GDB_CMD&lt;/code> environment variable (i.e. &lt;code>--env GDB_CMD=&amp;quot;$(GDB_CMD)&amp;quot;&lt;/code>) to every &lt;code>DOCKER_CMD&lt;/code> that requires interactive GDB debugging support.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>For each Makefile run target where interactive GDB debugging is required, prefix the run command with the &lt;code>GDB_CMD&lt;/code> variable, for example: &lt;code>cd build/_out; $(GDB_CMD) bin/test_tdd&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Set the &lt;code>GDB_CMD&lt;/code> environment variable with your GDB command (e.g. &lt;code>export GDB_CMD=&amp;quot;gdb -ex run&amp;quot;&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Execute your Makefile run target, which will start in GDB according to the configuration in &lt;code>GDB_CMD&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>A few simple GDB commands:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>bt&lt;/strong> - backtrace.&lt;/li>
&lt;li>&lt;strong>frame x&lt;/strong> - move to stack frame x (where x is from output of &lt;em>bt&lt;/em> command).&lt;/li>
&lt;li>&lt;strong>print x&lt;/strong> - print the value of variable x.&lt;/li>
&lt;li>&lt;strong>list&lt;/strong> - list the code around the current stopped point.&lt;/li>
&lt;li>&lt;strong>quit&lt;/strong> - exit GDB.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Hint: this technique is particularly helpful when working with CMocka based Test Cases.&lt;/p>
&lt;/blockquote>
&lt;p>Example GDB_CMD settings:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Run GDB.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">GDB_CMD&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;gdb -q -ex run&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Run GDB and exit if the program finished without error.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">GDB_CMD&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;gdb -q -ex=&amp;#39;set confirm on&amp;#39; -ex=run -ex=quit&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example Makefile:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Docker CMDS (shortened example).&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ifneq &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CI&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>, &lt;span style="color:#204a87">true&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DOCKER_BUILDER_CMD :&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> docker run -it --rm &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --volume &lt;span style="color:#000">$$&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">pwd&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>:/tmp/repo &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --env &lt;span style="color:#000">GDB_CMD&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>GDB_CMD&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --workdir /tmp/repo &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>GCC_BUILDER_IMAGE&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>endif
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Run target.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>run:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">cd&lt;/span> build/_out&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>GDB_CMD&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> bin/test_tdd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="modelc-integration-with-gdb-in-docker-environment">ModelC Integration with GDB in Docker Environment&lt;/h3>
&lt;p>When developing parts of the Model C Library it is occasionally necessary to run
the various elements under GDB. The Docker based build environment can be
configured to do this, and there are several Makefile targets which help in
establishing that environment.&lt;/p>
&lt;blockquote>
&lt;p>Exact commands to run SimBus and ModelC can be taken from the output of unit/integration tests.&lt;/p>
&lt;/blockquote>
&lt;h4 id="start-docker-environment-terminal-1">Start Docker Environment (Terminal 1)&lt;/h4>
&lt;p>This command creates a Docker Network, starts a Redis Container, and then starts
a Docker Build Container ready for use. The current directory of the repo
is also mapped into the container at &lt;code>/tmp/repo&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>:~/git/dse/dse.modelc$ make test-env
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>433d62be46ba4a2af17a03754e240e4e2774a093bceb86bed875dc0c4c9e7ec0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dse
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>658d227bbdf354525c31d930b9b045c867898498cd37fd3fbbae12e0aec626ca
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a035f2d928d18d4df4cfb2215d65e0f75abfb8a9fcdb5f52904d8fff115c4286
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>:/tmp/repo# ls dse/modelc/build/_out/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bin data examples include lib licenses
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root@c5e03415542a:/tmp/repo#
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="connect-to-docker-environment-and-start-simbus-terminal-2">Connect to Docker Environment and start SimBus (Terminal 2)&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>:~/git/dse/dse.modelc$ make test-env-it
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker &lt;span style="color:#204a87">exec&lt;/span> -it --workdir /tmp/repo modelc_testenv /bin/bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>:/tmp/repo# &lt;span style="color:#204a87">cd&lt;/span> /tmp/repo/dse/modelc/build/_out/examples/binary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>:/tmp/repo/dse/modelc/build/_out/examples/binary# gdb --args /tmp/repo/dse/modelc/build/_out/bin/simbus --logger &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> --timeout &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> stack.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>gdb&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> run
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Starting program: /tmp/repo/dse/modelc/build/_out/bin/simbus --logger &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> --timeout &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> stack.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Version: 0.0.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Start the Bus ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="connect-to-docker-environment-and-start-modelc-terminal-3">Connect to Docker Environment and start ModelC (Terminal 3)&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>:~/git/dse/dse.modelc$ make test-env-it
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker &lt;span style="color:#204a87">exec&lt;/span> -it --workdir /tmp/repo modelc_testenv /bin/bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>:/tmp/repo# &lt;span style="color:#204a87">cd&lt;/span> /tmp/repo/dse/modelc/build/_out/examples/binary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>:/tmp/repo/dse/modelc/build/_out/examples/binary# gdb --args /tmp/repo/dse/modelc/build/_out/bin/modelc --logger &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> --name binary_model_instance model.yaml stack.yaml signal_group.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>gdb&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> run
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Starting program: /tmp/repo/dse/modelc/build/_out/bin/modelc --logger &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> --name binary_model_instance model.yaml stack.yaml signal_group.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Version: 0.0.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Platform: linux-amd64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Model &lt;span style="color:#204a87;font-weight:bold">function&lt;/span> model_setup called
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Configure Channel: binary_channel
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Channel Name: Network
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Channel Alias: binary_channel
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> signal&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>0&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> : RAW &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>_load_signals:259&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Unique signals identified: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Init Controller channel: Network
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Pub Key: bus.ch.Network.tx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Sub Key: bus.ch.Network.rx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Allocate signal vector &lt;span style="color:#204a87">type&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> signals. &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>model_configure_channel:405&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>FATAL&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Binary vector not allocated! &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>model_setup:94&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Inferior &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>process 37&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> exited with code 0175&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>gdb&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="general-gdb-commands">General GDB commands&lt;/h4>
&lt;ul>
&lt;li>bt&lt;/li>
&lt;li>frame&lt;/li>
&lt;li>up&lt;/li>
&lt;li>down&lt;/li>
&lt;li>info locals&lt;/li>
&lt;li>info args&lt;/li>
&lt;/ul></description></item></channel></rss>